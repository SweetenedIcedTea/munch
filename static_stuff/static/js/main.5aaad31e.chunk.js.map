{"version":3,"sources":["DataClasses.tsx","API.tsx","components/MenuItem.tsx","components/MenuPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Menu","id","sections","recommended","restaurantName","data","r","toString","map","sectionJSON","Section","fromJSON","numid","name","foods","s","foodJSON","FoodItem","price","ingredients","description","image","f","MunchServer","address","this","post","get","menuJSON","console","log","endpoint","fetch","method","headers","Accept","response","responseData","json","body","JSON","stringify","MenuItem","props","food","foodData","className","src","join","onClick","onIncrement","disabled","quantities","Component","MenuPage","idTable","priceTable","foodQty","menuData","section","state","foodId","by","setState","key","bind","cost","Number","toFixed","listItems","qty","push","getTotalOrderCost","onCheckout","hasOrderedAnything","renderBreakdown","renderSection","munch","RestaurantQR","scanner","getMenu","window","onDecode","App","stage","failedToConnect","onScanResolved","testConnection","QRData","activeMenu","parseInt","menu","location","reload","scanning","renderQRStage","renderMenuStage","thanks","renderEndStage","renderCurrentStage","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5aaad31e.chunk.js","sourcesContent":["export class Menu {\n    id: string = \"\";\n    sections: Section[] = [];\n    recommended: string[] = [];\n    restaurantName: string = \"\";\n\n    static fromJSON(data: any): Menu {\n        const r = new Menu();\n        r.id = data[\"restaurant-id\"].toString();\n        r.sections = data[\"sections\"].map((sectionJSON: any) =>\n            Section.fromJSON(sectionJSON)\n        );\n        r.recommended = data[\"recomendation\"].map((numid:any) => numid.toString());\n        r.restaurantName = data[\"name\"];\n        return r;\n    }\n}\n\nexport class Section {\n    name: string = \"\";\n    foods: FoodItem[] = [];\n\n    static fromJSON(data: any): Section {\n        const s = new Section();\n        s.name = data[\"section-name\"];\n        s.foods = data[\"foods\"].map((foodJSON: any) =>\n            FoodItem.fromJSON(foodJSON)\n        );\n        return s;\n    }\n}\n\nexport class FoodItem {\n    id: string = \"\";\n    name: string = \"\";\n    price: number = 0;\n    ingredients: string[] = [];\n    description: string = \"\";\n    image: string = \"\";\n\n    static fromJSON(data: any): FoodItem {\n        const f = new FoodItem();\n        f.id = data[\"item-id\"].toString();\n        f.name = data[\"name\"];\n        f.price = data[\"price\"];\n        f.ingredients = data[\"ingredients\"];\n        f.description = data[\"description\"];\n        f.image = data[\"image\"];\n        return f;\n    }\n}\n","import {Menu} from './DataClasses';\n\nexport default class MunchServer {\n    address: string;\n    constructor(address: string) {\n        this.address = address;\n    }\n    async testConnection(): Promise<boolean> {\n        return (await this.post(\"echo\", \"bruh\") == \"bruh\");\n    }\n    async getMenu(id: string | number): Promise<Menu> {\n        const menuJSON = await this.get(\"menu/\"+id);\n        console.log(\"[debug]\",menuJSON);\n        return Menu.fromJSON(menuJSON);\n    }\n    async get(endpoint: string) {\n        try {\n            const response = await fetch(this.address + \"/\" + endpoint, {\n                method: \"GET\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                },\n            });\n            const responseData = response.json();\n            return responseData;\n        } catch (error) {\n            console.log(\"[API Error] \" + error); // bruh\n        }\n    }\n    async post(endpoint: string, data: any) {\n        try {\n            const response = await fetch(this.address + \"/\" + endpoint, {\n                method: \"POST\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(data)\n            });\n            const responseData = response.json();\n            return responseData;\n        } catch (error) {\n            console.log(\"[API Error] \" + error); // bruh\n        }\n    }\n}\n","import React, { Component } from \"react\";\nimport { FoodItem } from \"../DataClasses\";\n\ninterface Props {\n    foodData: FoodItem;\n    quantities: { [foodId: string]: number };\n    onIncrement: Function;\n}\n\ninterface State {}\n\nexport default class MenuItem extends Component<Props, State> {\n    food: FoodItem;\n    constructor(props: Props) {\n        super(props);\n        this.food = props.foodData as FoodItem;\n    }\n    render() {\n        return (\n            <span className=\"meal-box\">\n                <img src={\"/resources/food_thumbs/\"+this.food.image} className=\"meal-thumb\"></img>\n                <div className=\"meal-info\">\n                    <h2>{this.food.name}</h2>\n                    <br></br>\n                    <p className=\"meal-desc\">{this.food.description}</p>\n                    <p className=\"price-tag\">{this.food.price}</p>\n                    <i>\n                        <p className=\"ingredients\">\n                            Ingredients: {this.food.ingredients.join(\", \")}\n                        </p>\n                    </i>\n                    <span className=\"order-input\">\n                        <button onClick={()=>{\n                            this.props.onIncrement(this.food.id, 1)\n                        }}>+</button>\n                        <button disabled={this.props.quantities[this.food.id] == 0} onClick={()=>{\n                            this.props.onIncrement(this.food.id, -1)\n                        }}>-</button>\n                        <p className=\"order-input-quantity\">Quantity: {this.props.quantities[this.food.id]}</p>\n                    </span>\n                </div>\n            </span>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { FoodItem, Menu, Section } from \"../DataClasses\";\nimport MenuItem from \"./MenuItem\";\n\ninterface Props {\n    menuData: Menu;\n    onCheckout: Function;\n}\n\ninterface State {\n    foodQty: { [foodId: string]: number };\n}\n\nexport default class MenuPage extends Component<Props, State> {\n    idTable: { [foodId: string]: string } = {};\n    priceTable: { [foodId: string]: number } = {};\n    constructor(props: Props) {\n        super(props);\n\n        const foodQty: { [foodId: string]: number } = {};\n\n        for (const section of this.props.menuData.sections) {\n            for (const food of section.foods) {\n                foodQty[food.id] = 0;\n                this.idTable[food.id] = food.name;\n                this.priceTable[food.id] = food.price;\n            }\n        }\n        console.log(foodQty);\n        this.state = {\n            foodQty: foodQty\n        };\n    }\n    hasOrderedAnything() {\n        for (const foodId in this.state.foodQty) {\n            const qty = this.state.foodQty[foodId];\n            if (qty != 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    onIncrement(id: string, by: number) {\n        const foodQty: { [foodId: string]: number } = {};\n\n        for (const foodId in this.state.foodQty) {\n            foodQty[foodId] =\n                this.state.foodQty[foodId] + (id == foodId ? 1 : 0)*by;\n        }\n\n        this.setState({\n            foodQty: foodQty\n        });\n    }\n\n    renderSection(section: Section) {\n        return (\n            <div key={section.name}>\n                <h1>{section.name}</h1>\n                <ul>\n                    {section.foods.map(food => (\n                        <MenuItem\n                            key={food.id}\n                            foodData={food}\n                            quantities={this.state.foodQty}\n                            onIncrement={this.onIncrement.bind(this)}\n                        ></MenuItem>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n\n    getTotalOrderCost() {\n        var cost = 0;\n        for (const foodId in this.state.foodQty) {\n            const qty = this.state.foodQty[foodId];\n            const price = this.priceTable[foodId];\n\n            cost+=qty*price;\n        }\n        return Number(cost).toFixed(2);\n    }\n\n    renderBreakdown() {\n        // the only breakdown is the one im having rn\n        const listItems: JSX.Element[] = [];\n        for (const foodId in this.state.foodQty) {\n            const qty = this.state.foodQty[foodId];\n\n            if (qty != 0) {\n                listItems.push(\n                    <span key={foodId} className=\"breakdown-row\">\n                        <p className=\"breakdown-name\">{this.idTable[foodId]}</p>\n                        <p className=\"breakdown-qty\">x{qty}</p>\n                    </span>\n                );\n            }\n        }\n        return (\n            <div className=\"order-summary\">\n                <h2>Your order</h2>\n                <ul>{listItems}</ul>\n                <h3>Total: {this.getTotalOrderCost()}</h3>\n                <button onClick={()=>{this.props.onCheckout(this.state.foodQty)}}>Checkout</button>\n            </div>\n           \n        );\n    }\n\n    render() {\n        return (\n            <div>\n                {this.hasOrderedAnything() ? this.renderBreakdown() : null}\n                <h1 className=\"title\">Menu for {this.props.menuData.restaurantName}</h1>\n                <ul>\n                    {this.props.menuData.sections.map(\n                        this.renderSection.bind(this)\n                    )}\n                </ul>\n                <div className=\"recommended\">\n                    <h2>Recommended for you by our top-notch AI:</h2>\n                    <p>{this.props.menuData.recommended.map(foodId => this.idTable[foodId]).join(\", \")}</p>\n                </div>\n                \n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport $ from \"jquery\";\nimport MunchServer from \"./API\";\nimport { Menu } from \"./DataClasses\";\nimport MenuPage from \"./components/MenuPage\";\n\nconst munch = new MunchServer(\"https://domainofthebones.com\");\n\nclass RestaurantQR extends Component {\n    scanner: any;\n\n    constructor(props: any) {\n        super(props);\n    }\n\n    async componentDidMount() {\n        console.log(await munch.getMenu(\"1\"));\n        (window as any).onDecode = this.onDecode;\n    }\n\n    render() {\n        return (\n            <div className=\"qr-box\">\n                <video id=\"qr-preview\"></video>\n                <p>Scan your restaurant's QR code!</p>\n            </div>\n        );\n    }\n\n    onDecode(data: string) {\n        console.log(data);\n    }\n}\n\ninterface AppState {\n    stage: string;\n    failedToConnect: boolean;\n    activeMenu?: Menu;\n}\n\ninterface AppProps {}\n\nexport default class App extends Component<AppProps, AppState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            stage: \"scanning\",\n            failedToConnect: false\n        };\n        (window as any).onScanResolved = this.onScanResolved.bind(this);\n    }\n\n    async componentDidMount() {\n        const connected = await munch.testConnection();\n        if (connected) {\n            this.setState({\n                stage: \"scanning\"\n            });\n        } else {\n            this.setState({\n                failedToConnect: true\n            });\n        }\n    }\n\n    async onScanResolved(QRData: string) {\n        this.setState({\n            activeMenu: await munch.getMenu(QRData),\n            stage: 'menu'\n        });\n        console.log(this.state.activeMenu);\n        \n    }\n\n    async onCheckout(foodQty: { [foodId: string]: number }) {\n        this.setState({\n            stage:'thanks'\n        });\n        await munch.post(\"order\", {\n            \"table-id\": 1,\n            \"restaurant-id\": parseInt(this.state.activeMenu!.id),\n            \"order\": foodQty\n        });\n        \n    }\n\n    renderQRStage() {\n        return <RestaurantQR></RestaurantQR>;\n    }\n    renderMenuStage() {\n        const menu = this.state.activeMenu!;\n        return (\n            \n            <MenuPage menuData={menu} onCheckout={this.onCheckout.bind(this)}></MenuPage>\n        );\n    }\n    renderEndStage() {\n        return (\n            <div className=\"end-card\">\n                <h1>Thank you for eating at {this.state.activeMenu!.restaurantName}!</h1>\n                <button onClick={()=>{\n                    window.location.reload();\n                }}>Home</button>\n            </div>\n        );\n    }\n    renderCurrentStage() {\n        const stageRenderers: { [stageName: string]: Function } = {\n            scanning: this.renderQRStage.bind(this),\n            menu: this.renderMenuStage.bind(this),\n            thanks: this.renderEndStage.bind(this)\n        };\n        return stageRenderers[this.state.stage]();\n    }\n    render() {\n        return <div className=\"App\">\n            <div className=\"topnav\">\n                    <img className = \"logo\" src = \"/resources/pictures/munchLogoTrans.png\"></img>\n                    <a onClick={()=>{\n                        window.location.reload();\n                    }}>Home</a>\n                </div>\n            {this.renderCurrentStage()}\n        </div>;\n    }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}